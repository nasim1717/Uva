#include<bits/stdc++.h>
using namespace std;

// First, filter for primes
// Then, for each num, for every n greater than it, test if the carmichael doesn't hold
// This is sqrt(65005)

const int Max = 65005;
bool ipcscop[Max];
bool ipcar[Max];

int main(){
    // Calculated using Korselt's criterion
    for(int i=3; i<Max; i+=2)
        ipcar[i] = true;
    for(int i=3; i<Max; i+=2){
        if(!ipcscop[i]){
                ipcar[i]=false;
            for(int j=i; j<Max; j+=2*i){
                ipcscop[j]=true;
                if((j/i)%i==0 || (j-1)%(i-1)!=0)
                    ipcar[j]=false;
            }
        }
    }
    int n;
    while(cin>>n,n){
        if(ipcar[n])
            printf("The number %d is a Carmichael number.\n",n);
        else
            printf("%d is normal.\n", n);
    }
    return 0;
}
